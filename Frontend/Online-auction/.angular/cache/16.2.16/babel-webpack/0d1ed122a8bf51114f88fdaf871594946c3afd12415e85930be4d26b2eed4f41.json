{"ast":null,"code":"import { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class AuthService {\n  constructor() {\n    this.currentUser = null;\n    // Check if user is already logged in from localStorage\n    const loggedInUser = localStorage.getItem('loggedInUser');\n    if (loggedInUser) {\n      this.currentUser = {\n        username: loggedInUser,\n        email: ''\n      };\n    }\n  }\n  register(user) {\n    // In a real app, this would make an API call\n    // For now, we'll just simulate success\n    return of(true);\n  }\n  login(user) {\n    // In a real app, this would make an API call\n    // For now, we'll just simulate success\n    this.currentUser = user;\n    localStorage.setItem('loggedInUser', user.username);\n    return of(true);\n  }\n  logout() {\n    this.currentUser = null;\n    localStorage.removeItem('loggedInUser');\n  }\n  getCurrentUser() {\n    return this.currentUser;\n  }\n  isLoggedIn() {\n    return this.currentUser !== null;\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["of","AuthService","constructor","currentUser","loggedInUser","localStorage","getItem","username","email","register","user","login","setItem","logout","removeItem","getCurrentUser","isLoggedIn","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Keert\\OneDrive\\Desktop\\SPRINT-2,3\\Online-auction-system\\Frontend\\Online-auction\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { User } from '../models/user.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private currentUser: User | null = null;\r\n\r\n  constructor() {\r\n    // Check if user is already logged in from localStorage\r\n    const loggedInUser = localStorage.getItem('loggedInUser');\r\n    if (loggedInUser) {\r\n      this.currentUser = { username: loggedInUser, email: '' };\r\n    }\r\n  }\r\n\r\n  register(user: User): Observable<boolean> {\r\n    // In a real app, this would make an API call\r\n    // For now, we'll just simulate success\r\n    return of(true);\r\n  }\r\n\r\n  login(user: User): Observable<boolean> {\r\n    // In a real app, this would make an API call\r\n    // For now, we'll just simulate success\r\n    this.currentUser = user;\r\n    localStorage.setItem('loggedInUser', user.username);\r\n    return of(true);\r\n  }\r\n\r\n  logout(): void {\r\n    this.currentUser = null;\r\n    localStorage.removeItem('loggedInUser');\r\n  }\r\n\r\n  getCurrentUser(): User | null {\r\n    return this.currentUser;\r\n  }\r\n\r\n  isLoggedIn(): boolean {\r\n    return this.currentUser !== null;\r\n  }\r\n} "],"mappings":"AACA,SAAqBA,EAAE,QAAQ,MAAM;;AAMrC,OAAM,MAAOC,WAAW;EAGtBC,YAAA;IAFQ,KAAAC,WAAW,GAAgB,IAAI;IAGrC;IACA,MAAMC,YAAY,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IACzD,IAAIF,YAAY,EAAE;MAChB,IAAI,CAACD,WAAW,GAAG;QAAEI,QAAQ,EAAEH,YAAY;QAAEI,KAAK,EAAE;MAAE,CAAE;;EAE5D;EAEAC,QAAQA,CAACC,IAAU;IACjB;IACA;IACA,OAAOV,EAAE,CAAC,IAAI,CAAC;EACjB;EAEAW,KAAKA,CAACD,IAAU;IACd;IACA;IACA,IAAI,CAACP,WAAW,GAAGO,IAAI;IACvBL,YAAY,CAACO,OAAO,CAAC,cAAc,EAAEF,IAAI,CAACH,QAAQ,CAAC;IACnD,OAAOP,EAAE,CAAC,IAAI,CAAC;EACjB;EAEAa,MAAMA,CAAA;IACJ,IAAI,CAACV,WAAW,GAAG,IAAI;IACvBE,YAAY,CAACS,UAAU,CAAC,cAAc,CAAC;EACzC;EAEAC,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACZ,WAAW;EACzB;EAEAa,UAAUA,CAAA;IACR,OAAO,IAAI,CAACb,WAAW,KAAK,IAAI;EAClC;;;uBApCWF,WAAW;IAAA;EAAA;;;aAAXA,WAAW;MAAAgB,OAAA,EAAXhB,WAAW,CAAAiB,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}